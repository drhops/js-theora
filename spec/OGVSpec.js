describe("OGV loader", function () {
	
	var sToRaw = function (sData) {
		var sOut = "";
		
		for (var i=0; i < sData.length; i+=2) {
			var sByte = sData[i] + sData[i+1];
			sOut += String.fromCharCode(parseInt(sByte, 16));
		}
		
		return sOut;
	};
	
	it("barfs on bad codec", function () {
		var data = sToRaw("4F67675300020000000000000000BB2CA23B0000000045A89A7F012A807469666F7261030201002800170002800001680008000000190000000100000100");
		var ogv = new OGV("");
		
		var raised = false;
		try {
			ogv.dataDownloaded(data);
			ogv.readNextPage();
		} catch (e) {
			raised = true;
		}
		
		expect(raised).toEqual(true);
	});
	
	it("parses an id header", function () {
		var data = sToRaw("4F67675300020000000000000000BB2CA23B0000000045A89A7F012A807468656F72610302010028001700028000016800080000001900000001000001000001000000007CD81");
		
		/*
		 * 		var url = "fart.com/poop";
		 * 
		var fake$ = { ajax: function (x) { return; }};
		spyOn(fake$, "ajax").andReturn({
			done: function (cb) {
				cb(data);
			}
		});
		
		var callback = jasmine.createSpy();
		
		var ogv = new OGV(url, fake$);
		ogv.download(url, callback, fake$);
		
		expect(fake$.ajax).toHaveBeenCalled();
		expect(callback).toHaveBeenCalled();
		*/
		
		var ogv = new OGV();
		ogv.dataDownloaded(data);
		
		var header = ogv.readNextPage();
		
		expect(header.segmentSizes.length).toEqual(1);
		

		expect(header.display_width).toEqual(640);
		expect(header.display_height).toEqual(368);
		
		try {
			ogv.raw.readBit(1);
		} catch (e) {
			return;
		}
		expect(0).toEqual(1);
	});
	
	it("reads comment headers and multiple segments properly", function () {
		var data = sToRaw("4F67675300000000000000000000BB2CA23B010000007EEF52300E35FFFFFFFFFFFFFFFFFFFFFFFF90817468656F72610D0000004C61766635342E36312E3130300100000015000000656E636F6465723D4C61766635342E36312E313030827468656F7261BECD28F7B9CD6B18B5A9494A10739CE6318C5294A42108318C621084210840000000000000000000116DAE536792C8FC5612FC78395B6CE62AF568AB54281329245A10FE79399B8D66530978B255299389248219087C3C1D8E06A34180BC562A1409046221087C3C1C0C8602C1408838");
		var ogv = new OGV();
		ogv.dataDownloaded(data);
        var ogv_hd = new OGVHeaderDecoder();
        ogv_hd.decodePageHeader(ogv.raw);

        var header = ogv_hd.header;

		expect(header.segmentSizes.length).toEqual(2);

        ogv_hd.readSegment(ogv.raw);
		
		expect(header.vendor).toEqual("Lavf54.61.100");
		expect(header.comments.length).toEqual(1);
		expect(header.comments[0]).toEqual("encoder=Lavf54.61.100");
	});
	
	it("reads a setup header", function () {
		var data = sToRaw
		
		var ogv = new OGV();
		ogv.dataDownloaded(data);
        var ogv_hd = new OGVHeaderDecoder();
        ogv_hd.readSegment(ogv.raw);
        var header = ogv_hd.header;

		expect(header.lflims.length).toEqual(64);
		
		console.log(JSON.stringify(seg, null, "\t"));
	});
	
	it("does ilog properly", function () {

		expect(OGVHeaderDecoder.ilog(0)).toEqual(0);
		expect(OGVHeaderDecoder.ilog(1)).toEqual(1);
		expect(OGVHeaderDecoder.ilog(2)).toEqual(2);
		expect(OGVHeaderDecoder.ilog(3)).toEqual(2);
		expect(OGVHeaderDecoder.ilog(10)).toEqual(4);
	});
	
	it("rejects bad headers", function () {
		var data = sToRaw("4F672253");

		var ogv = new OGV();
		ogv.dataDownloaded(data);
		
		try {
			ogv.readNextPage();
		} catch (e) {
			return;
		}
		expect("did not throw error").toEqual(false);
	});
});
