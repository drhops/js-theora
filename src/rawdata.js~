var RawData = function (data) {
	this.data = data;
	this.bitIndex = 0;
};

RawData.prototype.readAsString = function (numBytes) {
	if (this.bitIndex % 8 !== 0) {
		throw new Error("Sorry, not supported yet");
	}
	
	var start = this.bitIndex/8;
	var out = this.data.slice(start, start + numBytes);
	this.bitIndex += 8*numBytes;
	
	return out;
};

RawData.prototype.readBits = function (numBits) {	
	var output = 0;
	
	for (var i=0; i < numBits; i++) {
		var byteIndex = Math.floor(this.bitIndex / 8);
		var bitOffset = 7 - (this.bitIndex % 8);
		
		if (byteIndex >= this.data.length) {
			throw new Error("Read past EOF");
		}
			
		var currByte = this.data.charCodeAt(byteIndex) & 0xFF;
		var currBit  = (currByte & (1 << bitOffset)) >> bitOffset;		
		
		output = output << 1;
		output = output | currBit;
		
		this.bitIndex++;
	}
	
	return output;
};

RawData.prototype.skipBytes = function (numBytes) {
	this.bitIndex += (numBytes *8);
};

RawData.prototype.readByte = function () {
	return this.readBytes(1);
};

RawData.prototype.getBitIndex = function () {
	return this.bitIndex;
};

RawData.prototype.readBytes = function (numBytes) {
	if (this.bitIndex % 8 === 0) {
		var out = 0;
		
		if (this.bitIndex/8 >= this.data.length) {
			throw new Error("Read past EOF");
		}		
		
		for (var i=0; i < numBytes; i++) {
			out = out << 8;
			out |= this.data.charCodeAt(Math.floor(this.bitIndex/8)) & 0xFF;
			this.bitIndex += 8;
		}
		return out;
	}
	return this.readBits(8*numBytes);
};

_.bindAll(RawData);